names(data)[c(11,17,23)] <- outcome.names
# take just the columns we need, convert outcome column to numeric
data <- data[,c("State","Hospital.Name",outcome)]
data[,outcome] <- suppressWarnings(as.numeric(data[,outcome]))
# get rid of rows where outcome is na
data <- data[!is.na(data[outcome]),]
# sort data by state name, then outcome, then hospital name
data <- data[order(data$State, data[outcome], data$Hospital.Name),]
# aggregate by state, choosing the row that corresponds to the rank num
ranksbystate <- aggregate(data, by=list(data$State), function(x) {
if (!is.numeric(num)) {
if (num == "best") {
num <- 1
} else if (num == "worst") {
num <- length(x)
} else {
stop("invalid num")
}
}
x[num]
})
# get just the columns we need and rename them
out <- ranksbystate[,c(3,1)]
names(out) <- c("hospital","state")
return(out)
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best <- function(state, outcome) {
## read the outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## check that state and outcome are valid
if(!state_valid(state)) {
stop('invalid state')
}
if(!outcome_valid(outcome)) {
stop('invalid outcome')
}
## return name of hospital with lowest 30-day death rate
## Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
## Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
## Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
## State, Hospital.Name
find_records <- outcome_data[, "State"] == state
records <- outcome_data[find_records,]
rate_col <- find_rate_col(outcome)
find_rate <- as.numeric(records[, rate_col])
lowest_rate <- min(find_rate, na.rm = TRUE)
if(!length(lowest_rate) == 1) {
rate_msg <- "multiple rates returned"
rate_msg
find_rate_rec <- as.numeric(records[, rate_col]) == lowest_rate
record_indexes <- all('TRUE' %in% find_rate_rec)
rate_records <- records[record_indexes,]
hosp_names <- NULL
for (rec in rate_records) {
hosp_names <- c(hosp_names, rec$Hospital.Name)
}
order_list <- order(hosp_names)
hosp_names[order_list[1]]
} else {
find_rate_rec <- as.numeric(records[, rate_col]) == lowest_rate
record_index <- match('TRUE', find_rate_rec)
final_record <- records[record_index,]
final_record$Hospital.Name
}
}
state_valid <- function(state_abbr) {
state_list <- state.abb
msg <- FALSE
for (i in state_list) {
if (i == state_abbr) {
msg <- TRUE
}
}
msg
}
outcome_valid <- function(outcome) {
outcome == "heart attack" || outcome == "heart failure" ||
outcome == "pneumonia"
}
find_rate_col <- function(outcome) {
if (outcome == "heart attack") {
rate_col <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if (outcome == "heart failure") {
rate_col <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { rate_col <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia" }
rate_col
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
# read outcome
data <- read.csv(file="outcome-of-care-measures.csv", colClasses = 'character')
if(!any(state == data$State)) {
stop('invalid state')
}
if(outcome == 'heart attack') {
i <- 11
}
else if(outcome == 'heart failure') {
i <- 17
}
else if(outcome == 'pneumonia') {
i <- 23
}
else {
stop('invalid outcome')
}
data.state <- data[data$State == state, ]
data.state[, i] <- as.numeric(x=data.state[, i])
data.state <- data.state[complete.cases(data.state), ]
# print(data.state[, c(2, i)])
if(num == "best") {
num = 1
}
else if(num == "worst") {
num = nrow(data.state)
}
else if(is.numeric(x=num)) {
# print(num)
if(num<1 || num > nrow(data.state)) {
return(NA)
}
}
else {
stop('invalid num')
}
# print(sort(data.state[, i]))
data.state <- data.state[order(data.state[,i], data.state$Hospital.Name), ]
return.names <- data.state[num, ]$Hospital.Name
# print(return.names)
return.names[1]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num="best") {
outcome.names <- c("heart attack", "heart failure", "pneumonia")
# check validity of outcome
if (!outcome %in% outcome.names) {
stop("invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
# rename outcome columns for easy reference
names(data)[c(11,17,23)] <- outcome.names
# take just the columns we need, convert outcome column to numeric
data <- data[,c("State","Hospital.Name",outcome)]
data[,outcome] <- suppressWarnings(as.numeric(data[,outcome]))
# get rid of rows where outcome is na
data <- data[!is.na(data[outcome]),]
# sort data by state name, then outcome, then hospital name
data <- data[order(data$State, data[outcome], data$Hospital.Name),]
# aggregate by state, choosing the row that corresponds to the rank num
ranksbystate <- aggregate(data, by=list(data$State), function(x) {
if (!is.numeric(num)) {
if (num == "best") {
num <- 1
} else if (num == "worst") {
num <- length(x)
} else {
stop("invalid num")
}
}
x[num]
})
# get just the columns we need and rename them
out <- ranksbystate[,c(3,1)]
names(out) <- c("hospital","state")
return(out)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
state <- "TX"
outcome <- "heart failure"
num <- 4
data[, "State" == state ]
data[, data$State == state ]
records <- data[find_records,]
find_records <- data[, "State"] == state
head(find_records)
records <- data[find_records,]
head(records)
length(records[,1])
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- length(records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
column <- column_name(outcome)
column_name <- function(outcome) {
if (outcome == "heart attack") {
col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if (outcome == "heart failure") {
col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia" }
col_name
}
column <- column_name(outcome)
rates <- as.numeric(records[, column])
rates
complete.cases(rates)
rates[complete.cases(rates)]
rates
rate <- rates[rates_ordered[num]]
order(rates[complete.cases(rates)])
rates_ordered <- order(rates[complete.cases(rates)])
rates[rates_ordered[num]]
rate <- rates[rates_ordered[num]]
find_tie_records <- records[, column] == rate
ranked_records <- records[find_tie_records,]
hosp_names <- NULL
i <- 1
while (i <= length(ranked_records[,1])) {
hosp_names <- c(hosp_names, ranked_records[i,]$Hospital.Name)
i <- i + 1
}
order_list <- order(as.vector(hosp_names))
hosp_names
rates_ordered <- order(rates, na.last = TRUE)
rate <- rates[rates_ordered[num]]
rate
order(records[, as.numeric(column)] == rate)
order(records[, as.numeric(column)])
order(records[, column] == rate)
rates_ordered <- order(rates, na.last = TRUE)
rate <- rates[rates_ordered[num]]
rate
rates_ordered
state_records <- data[,data[, "State"] == state]
state_records <- data[, data$State == state]
state_records <- data[data$State == state,]
head(state_records)
column <- column_name(outcome)
state_records[, column] <- as.numeric(state_records[, column])
state_records <- state_records[complete.cases(state_records), ]
head(state_records)
state_records <- state_records[order(state_records[, column],
state_records$Hospital.Name), ]
head(state_records)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state_valid(state)) {
stop('invalid state')
}
if(!outcome_valid(outcome)) {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## get logical list of rows containing state
state_records <- data[data$State == state,]
## set num to integer if best or worst
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- length(records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
## 30-day death rate
## get column name for specified outcome
column <- column_name(outcome)
state_records[, column] <- as.numeric(state_records[, column])
state_records <- state_records[complete.cases(state_records), ]
state_records <- state_records[order(state_records[, column],
state_records$Hospital.Name), ]
state_records[num, ]$Hospital.Name
}
state_valid <- function(state_abbr) {
state_list <- state.abb
msg <- FALSE
for (i in state_list) {
if (i == state_abbr) {
msg <- TRUE
}
}
msg
}
outcome_valid <- function(outcome) {
outcome == "heart attack" || outcome == "heart failure" ||
outcome == "pneumonia"
}
column_name <- function(outcome) {
if (outcome == "heart attack") {
col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if (outcome == "heart failure") {
col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia" }
col_name
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state_valid(state)) {
stop('invalid state')
}
if(!outcome_valid(outcome)) {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## get logical list of rows containing state
state_records <- data[data$State == state,]
## set num to integer if best or worst
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- length(state_records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
## 30-day death rate
## get column name for specified outcome
column <- column_name(outcome)
state_records[, column] <- as.numeric(state_records[, column])
state_records <- state_records[complete.cases(state_records), ]
state_records <- state_records[order(state_records[, column],
state_records$Hospital.Name), ]
state_records[num, ]$Hospital.Name
}
rankhospital("MD", "heart attack", "worst")
nrow(state_data)
nrow(state_records)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state_valid(state)) {
stop('invalid state')
}
if(!outcome_valid(outcome)) {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## get logical list of rows containing state
state_records <- data[data$State == state,]
## set num to integer if best or worst
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- nrow(state_records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
## 30-day death rate
## get column name for specified outcome
column <- column_name(outcome)
state_records[, column] <- as.numeric(state_records[, column])
state_records <- state_records[complete.cases(state_records), ]
state_records <- state_records[order(state_records[, column],
state_records$Hospital.Name), ]
state_records[num, ]$Hospital.Name
}
rankhospital("MD", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state_valid(state)) {
stop('invalid state')
}
if(!outcome_valid(outcome)) {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## get logical list of rows containing state
state_records <- data[data$State == state,]
## set num to integer if best or worst
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- nrow(state_records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
## 30-day death rate
## get column name for specified outcome
column <- column_name(outcome)
state_records[, column] <- as.numeric(state_records[, column])
state_records <- state_records[complete.cases(state_records), ]
state_records <- state_records[order(state_records[, column],
state_records$Hospital.Name), ]
state_records[num, ]$Hospital.Name
}
state <- "MD"
outcome <- "heart attack"
num <- "worst"
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state_records <- data[data$State == state,]
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- nrow(state_records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
num
column <- column_name(outcome)
state_records[, column] <- as.numeric(state_records[, column])
state_records <- state_records[complete.cases(state_records), ]
state_records <- state_records[order(state_records[, column],
state_records$Hospital.Name), ]
head(state_records)
nrow(state_records)
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- nrow(state_records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
num
nrow(state_records)
num <- 41
state_records[num, ]$Hospital.Name
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
if(!state_valid(state)) {
stop('invalid state')
}
if(!outcome_valid(outcome)) {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## get list of rows containing state
state_records <- data[data$State == state,]
## 30-day death rate
## get column name for specified outcome
column <- column_name(outcome)
state_records[, column] <- as.numeric(state_records[, column])
state_records <- state_records[complete.cases(state_records), ]
state_records <- state_records[order(state_records[, column],
state_records$Hospital.Name), ]
## set num to integer if best or worst
if (num == 'best') {
num <- 1
}
if (num == 'worst') {
num <- nrow(state_records)
}
if (!is.numeric(num)) {
stop("invalid rank number")
}
state_records[num, ]$Hospital.Name
}
state_valid <- function(state_abbr) {
state_list <- state.abb
msg <- FALSE
for (i in state_list) {
if (i == state_abbr) {
msg <- TRUE
}
}
msg
}
outcome_valid <- function(outcome) {
outcome == "heart attack" || outcome == "heart failure" ||
outcome == "pneumonia"
}
column_name <- function(outcome) {
if (outcome == "heart attack") {
col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
}
else if (outcome == "heart failure") {
col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
}
else { col_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia" }
col_name
}
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
